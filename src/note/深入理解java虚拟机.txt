Java内存区域与内存溢出异常
运行时数据区域
1、程序计数器
程序计数器是一个较小的内存空间，它可以看做是线程所执行的字节码的行号指示器。字节码解释器工作时就是通过
改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需
要依赖这个计数器来完成。
2、Java虚拟机栈
虚拟机栈描述的是Java方法执行的内存模型：每个方法在执行的同时都会创建一个栈帧用于存储局部变量表、操作数
栈、动态链接、方法出口等信息。每个方法从调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中入栈到出栈
的过程。
3、本地方法栈
本地方法栈则为虚拟机使用到的native方法服务，
4、Java堆
所有的对象实例以及数组都要在堆上分配。
5、方法区
方法区与java堆一样，是各个线程共享的内存区域，他用于存储已被虚拟机加载的类信息、常量、静态变量、即时编
译器编译后的代码等数据。
6、运行时常量池
运行时常量池是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是
常量池，用于存放编译器生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。
7、直接内存

对象的访问定位
Java程序需要通过栈上的reference数据来操作堆上的具体对象，由于reference类型在Java虚拟机规范中规定了
一个指向对象的引用，并没有定义这个引用应该通过何种方法去定位、访问堆中的对象的具体位置、所以对象访问方
式也是取决于虚拟机实现而定的。
目前主流的访问方式有使用句柄和直接指针两种。
1、使用句柄访问
那么Java堆中将会划分出一块内存来作为句柄池，reference中存储的就是对象的句柄地址，
而句柄中包含了到对象实例数据的指针与到对象类型数据的指针(地址信息)。
2、使用直接指针
那么Java堆对象包括对象实例数据和到对象类型数据的指针，而reference中存储的直接就是对象地址。

两种方法的各个优势：
使用句柄来访问的最大好处是reference中存储的是稳定的句柄地址，在对象被移动时（垃圾回收时对象有可能会被移
动）只会改变句柄中的实例数据指针，而reference本身不需要修改。
使用直接指针访问方式的最大好处是，速度快，该方式节省了一次指针定位的时间开销。而句柄访问方式需要两次。

垃圾收集器与内存分配策略
1、引用计数算法
给对象添加一个引用计算器，每当有一个地方引用它时，计数器值就加1；当引用失效时，计数器值就减1；任何时刻计数
器为0的对象就是不可能再被使用的。
会导致循环引用，使得GC回收器无法回收它们。
2、可达性分析算法
"GC Roots"的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径为引用链，当一个对象到GC Roots没有任
何引用链相连时，则证明此对象是不可用的。
在Java语言中，可作为GC Roots的对象包括：
（1）虚拟机栈（栈帧中的本地变量表）中引用的对象。
（2）方法区中类静态属性引用的对象。
（3）方法区中常量引用的对象。
（4）本地方法栈中JNI（Native方法）引用的对象。

引用：
1、强引用
比如对象引用，只要强引用存在，垃圾收集器永远不会回收掉被引用的对象。
2、软引用
对于软引用关联着的对象，在系统将要发生内存溢出异常之前，将会把这些对象列进回收范围之中进行第二次回收。
3、弱引用
弱引用用来描述非必需对象，被弱引用关联的对象只能生存到下一次垃圾收集发生之前。当垃圾收集器工作时，无论当前
内存是否足够，都会回收掉只被弱引用关联的对象。
4、虚引用

垃圾收集算法
1、标记-清除算法
首先标记出所有需要回收的对象，在标记完成后统一回收所有被标记的对象。
不足：标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致以后在程序运行过程中需要分配较大对象时，
无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。
2、复制算法
将内存划分为大小相同的两块，每次只使用其中一块。当这一块的内存用完了，就将还存活着的对象复制到另一块上面。
然后再把已使用过的内存空间一次清理掉。
不足：将内存缩小为了原来的一半。
3、标记-整理算法
在标记-清除算法的基础上，对所有存活的对象都移向内存的一端。

分代收集算法
Java堆分为新生代、老年代。
在新生代中，每次垃圾收集时都发现有大批对象死去，只有少量存活，那就选用复制算法。

垃圾回收器
1、Serial收集器
单线程收集器：简单高效。
对于单个CPU来说，Serial收集器由于没有线程交互的开销。
2、ParNew收集器
3、Parallel Scavenge收集器
4、Serial Old收集器
5、Parallel Old收集器
6、CMS收集器
并发收集、低停顿。
7、G1收集器
并发与并行、分代收集、空间整合、可预测停顿。

内存分配与回收策略
1、对象优先在Eden分配
大多数情况下，对象在新生代Eden区中分配。在Eden区没有足够空间进行分配时，虚拟机将发起一次Minor GC。
2、大对象直接进入老年代
所谓大对象是指，需要大量连续内存空间的java对象，最典型的大对象就是那种很长的字符串以及数组。
3、长期存活的对象将进入老年代
虚拟机给每个对象定义了一个对象年龄计数器，如果对象在Eden出生并经过第一次Minor GC后仍然存活，并且能被
Survivor容纳的话，将被移动到Survivor空间中，并且对象年龄设为1.对象每经过一次垃圾回收未被清理，其年龄
增加一岁，当达到15岁，就将会被晋升到老年代。
4、动态对象年龄判定
5、空间分配担保
在发生Minor GC之前，虚拟机会先检查老年代最大可用的连续空间是否大于新生代所有对象总空间，如果这个条件
成立，那么Minor GC可以确保是安全的。
如果不成立，则虚拟机会查看HandlePromotionFailure设置值是否允许担保失败。如果允许，那么会继续检查老
年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小。
如果大于，将尝试着进行一次Minor GC，如果小于，或者HandlePromotionFailure设置不允许，这次需要进行
一次Full GC。

虚拟机性能监控与故障处理工具
jps：虚拟机进程状况工具
jstal：虚拟机统计信息监视工具
jinfo：java配置信息工具
jmap：java内存映像工具
jstack：java堆栈跟踪工具
