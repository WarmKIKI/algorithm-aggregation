多线程学习笔记

1、isAlive() ：判断当前线程是否存活
2、getId() : 获取线程唯一标识
3、在sleep状态下停止某一线程，会进入catch语句，并且清除停止状态值，使之变成false
4、stop() ：暴力停止线程，已弃用
5、suspend() ：暂停线程
      resume() ：恢复线程
6、yield() : 放弃当前cpu资源，让其他任务去占用cpu执行时间。

线程是有优先级的（1~10），cpu会优先执行优先级较高的线程对象中的任务。
线程的优先级具有继承性，如果A线程启动B线程，则B线程的优先级与A一样的
优先级具有规则性：线程的优先级与代码执行顺序无关，cpu尽量将执行资源让给优先级比较高的线程
优先级具有随机性：一定优先级高的线程每次都先执行完，线程优先级具有随机性
优先级高的线程运行的快

在java线程中有两种线程，一种是用户线程，另一种是守护线程。
典型的守护线程就是垃圾回收线程

对象及变量的并发访问
* synchronize同步方法
1. 局部变量线程安全
   方法中的变量不存在非线程安全问题，永远是线程安全的。这是方法内部的变量是私有的特性造成的。
   方法中的私有变量不会先开辟出内存空间，而是等调用时在对应的调用线程中为方法中的变量申请空间，所以有几个线程调用则每个线程就会在自己的线程空间的栈为局部变量申请几个引用，同时，在堆中申请几个空间，所以多线程在调用时会处理自己线程内的方法的私有变量，因此，方法内的私有变量是线程安全的。

    2. 实例变量非线程安全
    在类的声明中，属性是用变量来表示的，这种变量就称为实例变量。
    多线程访问同一个对象中的同步方法时一定是线程安全的。

    3. 多个对象多个锁
    如果多个线程访问多个对象，则JVM会创建多个锁。

* synchronized方法与锁对象
* synchronized锁重入
   ”可重入锁“的概念是：自己可以再次获取自己的内部锁。
   synchronized拥有锁重入的功能，也就是说使用synchronized时，当一个线程得到一个对象锁后，再次请求此对象锁时是可以再次得到该对象的锁的。
   可重入锁也支持在父子类继承的环境中。
* 出现异常，锁自动释放
   同步不可以继承，所以要在子类方法上加上synchronized关键字

* synchronized同步语句块
* 不在synchronized块中就是异步执行，在synchronized块中就是同步执行。
   synchronized代码块间的同步性

* volatile
   volatile关键字的主要作用是使得变量在多个线程间可见。volatile具有可见性，但不支持原子性。

* wait()/notify()
   wait()被执行，锁被自动释放，但执行完notify()方法，锁却不自动释放。
   方法notify()仅随机唤醒一个线程，当多次调用notify()方法时，会随机将等待wait状态的线程唤醒。
   唤醒全部线程，可以使用notifyAll()方法。
   wait(long)的功能是等待某一个时间内是否有线程对锁进行唤醒，如果超过这个时间则自动唤醒。

* 生产者与消费者
   join()的作用是使所属的线程对象x正常执行run()方法中的任务，而使得当前线程z进行无期限的阻塞，等待线程x销毁后再继续执行线程z后面的代码。
   比如，线程A调用了join()后，必须等待A执行完毕后才可以执行main线程的代码或者其他线程的代码。

 join() 和 interrupt()如果彼此遇到，则会出现异常。
 join()方法中的参数是设定等待时间。
 join(long)方法的功能在内部是使用wait(long)方法来实现的，所以join(long)方法具    有释放锁的特点。
 sleep(long)具有不释放锁的特点。

* threadLocal类的使用
  子线程和父线程各有各自所拥有的值。

* InheritableThreadLocal的使用
   使用InheritableThreadLocal类可以让子线程从父线程中取得值。

* Lock使用
  使用ReentrantLock类

  synchronized关键字与wait()和notify()/notifyAll()方法相结合可以实现等待/通知模式
  reentrantLock借助于Condition对象也可以实现同样的功能

  Object类中的wait()方法相当于Condition类中的await()方法。
  Object类中的wait(long timeout)方法相当于Condition类中的await(long time, TimeUnit unit)方法。
  Object类中的notify()方法相当于Condition类中的signal()。
  Object类中的notifyAll()方法相当于Condition类中的signalAll()方法。

*  公平锁与非公平锁
  公平锁表示线程获取锁的顺序是按照线程加锁的顺序来分配的，即先来先得的FIFO先进先出的顺序。
  非公平锁就是一种获取锁的枪占机制，是随机获得锁的，和公平锁不一样的就是先来的不一定先得到锁，这个方式可能造成某些线程一直拿不到锁，结果也就是不公平的了。

 方法boolean hasQueuedThread(Thread thread)的作用是查询指定的线程是否正在等待获取此锁定。
方法boolean isFair()的作用是判断是不是公平锁。

 默认情况下，ReentrantLock类使用的是非公平锁。